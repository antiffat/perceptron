import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class Perceptron {
    private double[] weights;
    private double threshold;
    private double learningRate;
    private Random random = new Random();

    public Perceptron(int inputCount, double learningRate) {
        this.weights = new double[inputCount];
        this.threshold = random.nextDouble() * 0.1;
        this.learningRate = learningRate;

        for (int i = 0; i < inputCount; i++) {
            this.weights[i] = random.nextDouble() * 0.1;
        }
    }

    public int predict(double[] inputs) {
        double sum = 0;
        for (int i = 0; i < weights.length; i++) {
            sum += weights[i] * inputs[i];
        }
        if (sum >= this.threshold) {
            return 1;
        }
        return 0;
    }

    public void train(double[] inputs, int expectedOutput) {
        int prediction = predict(inputs);
        int error = expectedOutput - prediction;

        for (int i = 0; i < weights.length; i++) {
            if (error != 0) {
                weights[i] += this.learningRate * error * inputs[i];
            }
        }

        this.threshold += error * learningRate * (-1);
    }

    public static List<DataPoint> loadData(String fileName) throws IOException {
        List<DataPoint> dataPoints = new ArrayList<>();
        Map<String, Integer> labelMapping = new HashMap<>();
        BufferedReader reader = new BufferedReader(new FileReader(fileName));
        String line;

        int inputCount = -1;
        while ((line = reader.readLine()) != null) {
            String[] parts = line.split(",");
            if (inputCount == -1) inputCount = parts.length - 1;
            double[] inputs = new double[inputCount];
            for (int i = 0; i < inputCount; i++) {
                inputs[i] = Double.parseDouble(parts[i].trim());
            }

            String labelStr = parts[parts.length - 1].trim();
            int label;
            if (isNumeric(labelStr)) {
                label = Integer.parseInt(labelStr);
            } else {
                labelMapping.putIfAbsent(labelStr, labelMapping.size());
                label = labelMapping.get(labelStr);
            }
            dataPoints.add(new DataPoint(inputs, label));
        }
        reader.close();
        return dataPoints;
    }

    public static boolean isNumeric(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Welcome to the Perceptron Training and Prediction System");
        System.out.println("Please enter the path to the training data file:");
        String trainDataPath = scanner.nextLine();
        System.out.println("Please enter the path to the test data file:");
        String testDataPath = scanner.nextLine();
        System.out.println("Enter the learning rate:");
        double learningRate = Double.parseDouble(scanner.nextLine());
        System.out.println("Enter the number of epochs:");
        int epochs = Integer.parseInt(scanner.nextLine());

        try {
            List<DataPoint> trainData = loadData(trainDataPath);
            List<DataPoint> testData = loadData(testDataPath);
            Perceptron perceptron = new Perceptron(trainData.get(0).inputs.length, learningRate);

            for (int epoch = 0; epoch < epochs; epoch++) {
                Collections.shuffle(trainData);
                for (DataPoint dp : trainData) {
                    perceptron.train(dp.inputs, dp.label);
                }

                int correct = 0;
                for (DataPoint dp : testData) {
                    if (perceptron.predict(dp.inputs) == dp.label) correct++;
                }
                double accuracy = (double) correct / testData.size() * 100;
                System.out.println("Epoch " + (epoch + 1) + " - Accuracy: " + String.format("%.2f%%", accuracy));
            }

            System.out.println("\nTraining Complete. Enter new observations (comma-separated) or type 'exit' to exit:");
            while (true) {
                String input = scanner.nextLine();
                if ("exit".equalsIgnoreCase(input.trim())) break;
                String[] parts = input.split(",");
                double[] inputs = new double[parts.length];
                for (int i = 0; i < parts.length; i++) {
                    inputs[i] = Double.parseDouble(parts[i].trim());
                }
                int prediction = perceptron.predict(inputs);
                System.out.println("Predicted class: " + (prediction == 0 ? "Class 0" : "Class 1"));
            }
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
        } catch (NumberFormatException e) {
            System.out.println("Please enter valid numbers for learning rate and epochs.");
        }

        scanner.close();
    }

}
